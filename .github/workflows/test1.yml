name: Optimized SukiSU Kernel Build
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: choice
        description: "Configuration File"
        required: true
        default: oneplus_13r
        options:
          - oneplus_nord_ce4_v
          - oneplus_nord_4_v
          - oneplus_ace_3v_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad_pro_v
          - oneplus_pad2_v
          - oneplus_ace5_pro
          - oneplus_13
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
      SUSFS_CI:
        type: choice
        description: "Download SUSFS Module Method"
        required: true
        default: CI
        options:
          - CI
          - Release
      KSU_META:
        type: string
        description: "Branch Name/Custom Version Identifier"
        required: false
        default: "susfs-main/ultra"
      BUILD_TIME:
        type: string
        description: "Custom Build Time (Enter F to Use Current Time)"
        required: false
        default: "Wed June 18 15:01:55 UTC 2025"
      SUFFIX:
        type: string
        description: "Custom Kernel Suffix (Leave Empty for Random String)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "Enable Fast Build?"
        required: true
        default: true
      VFS:
        type: boolean
        description: "Enable Manual Hooks (VFS)?"
        required: true
        default: true
      KPM:
        type: boolean
        description: "Enable Kernel Module (KPM)?"
        required: true
        default: true

jobs:
  build:
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && '[FAST]' || '' }} Build ${{ github.event.inputs.FILE }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
      CCACHE_DIR: $HOME/.ccache_${{ github.event.inputs.FILE }}
      APT_CACHE_DIR: $HOME/apt-cache

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Device Configuration
        run: |
          set -e
          echo "üîß Validating device configuration..."
          FILE="${{ github.event.inputs.FILE }}"
          declare -A VALID_COMBINATIONS=(
            ["oneplus_nord_ce4"]="sm7550 crow android14 5.15"
            ["oneplus_nord_4"]="sm7675 pineapple android14 6.1"
            ["oneplus_ace_3v"]="sm7675 pineapple android14 6.1"
            ["oneplus_10_pro"]="sm8450 waipio android12 5.10"
            ["oneplus_10t"]="sm8475 waipio android12 5.10"
            ["oneplus_11r"]="sm8475 waipio android12 5.10"
            ["oneplus_ace2"]="sm8475 waipio android12 5.10"
            ["oneplus_ace_pro"]="sm8475 waipio android12 5.10"
            ["oneplus_11"]="sm8550 kalama android13 5.15"
            ["oneplus_12r"]="sm8550 kalama android13 5.15"
            ["oneplus_ace2_pro"]="sm8550 kalama android13 5.15"
            ["oneplus_ace3"]="sm8550 kalama android13 5.15"
            ["oneplus_open"]="sm8550 kalama android13 5.15"
            ["oneplus12"]="sm8650 pineapple android14 6.1"
            ["oneplus_13r"]="sm8650 pineapple android14 6.1"
            ["oneplus_ace3_pro"]="sm8650 pineapple android14 6.1"
            ["oneplus_ace5"]="sm8650 pineapple android14 6.1"
            ["oneplus_pad_pro"]="sm8650 pineapple android14 6.1"
            ["oneplus_pad2"]="sm8650 pineapple android14 6.1"
            ["oneplus_ace5_pro"]="sm8750 sun android15 6.6"
            ["oneplus_13"]="sm8750 sun android15 6.6"
            ["oneplus_13t"]="sm8750 sun android15 6.6"
            ["oneplus_13s"]="sm8750 sun android15 6.6"
            ["oneplus_pad_2_pro"]="sm8750 sun android15 6.6"
            ["oneplus_pad_3"]="sm8750 sun android15 6.6"
          )
          FILE_BASE=$(echo "$FILE" | sed -E 's/_[a-z]+$//')
          COMBINATION="${VALID_COMBINATIONS[$FILE_BASE]}"
          if [ -z "$COMBINATION" ]; then
            echo "‚ùå Invalid device: $FILE"
            echo "Valid devices:"
            printf -- '- %s\n' "${!VALID_COMBINATIONS[@]}"
            exit 1
          fi
          read CPU CPUD ANDROID_VERSION KERNEL_VERSION <<< "$COMBINATION"
          BUILD_METHOD=$([[ "$ANDROID_VERSION" == "android15" && "$KERNEL_VERSION" == "6.6" ]] && echo "perf" || echo "gki")
          echo "‚úÖ Valid configuration: FILE=$FILE, CPU=$CPU, CPUD=$CPUD, ANDROID_VERSION=$ANDROID_VERSION, KERNEL_VERSION=$KERNEL_VERSION, BUILD_METHOD=$BUILD_METHOD"
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "CPUD=$CPUD" >> $GITHUB_ENV
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "BUILD_METHOD=$BUILD_METHOD" >> $GITHUB_ENV

      - name: Optimize System Resources
        run: |
          set -e
          echo "üîÑ Optimizing system resources..."
          df -h
          if [ ! -f /swapfile ]; then
            sudo swapoff -a
            sudo fallocate -l 3G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
          fi
          free -h
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc || true

      - name: Configure Build Environment
        run: |
          set -e
          echo "‚öôÔ∏è Configuring build environment..."
          mkdir -p "${{ env.CCACHE_DIR }}" "${{ env.APT_CACHE_DIR }}"/{archives,lists/partial}
          echo "Dir::Cache \"${{ env.APT_CACHE_DIR }}\";" | sudo tee /etc/apt/apt.conf.d/99github-actions-cache
          echo "Dir::Cache::archives \"${{ env.APT_CACHE_DIR }}/archives\";" | sudo tee -a /etc/apt/apt.conf.d/99github-actions-cache
          sudo chown -R $USER:$USER "${{ env.APT_CACHE_DIR }}"
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          if [ ! -f "${{ env.CCACHE_DIR }}/.ccache_initialized" ]; then
            ccache -M ${{ env.CCACHE_MAXSIZE }}
            touch "${{ env.CCACHE_DIR }}/.ccache_initialized"
          fi
          ccache -s

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.APT_CACHE_DIR }}
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-deps-${{ github.event.inputs.FILE }}-${{ github.event.inputs.BUILD_METHOD }}-v1
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Build Dependencies
        run: |
          set -e
          echo "üì¶ Installing dependencies..."
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
            build-essential flex bison libssl-dev libelf-dev libncurses-dev \
            ccache rsync kmod cpio git zlib1g-dev bc python3 python-is-python3 \
            lz4 dwarves llvm clang lld curl unzip cmake ninja-build pahole libxml2-utils
          wget -q https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20 all
          rm llvm.sh
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > /tmp/repo
          chmod +x /tmp/repo
          sudo mv /tmp/repo /usr/local/bin/

      - name: Initialize Kernel Workspace
        run: |
          set -e
          echo "üìÅ Setting up kernel workspace..."
          mkdir -p kernel_workspace/.repo/manifests_fallback
          curl -sLO --retry 5 --retry-delay 2 --retry-connrefused \
            "https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/oneplus/${{ env.CPU }}/${{ github.event.inputs.FILE }}.xml"
          [ -f "${{ github.event.inputs.FILE }}.xml" ] || { echo "Failed to download manifest"; exit 1; }
          mv "${{ github.event.inputs.FILE }}.xml" kernel_workspace/.repo/manifests_fallback/
          cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/${{ env.CPU }} -m ${{ github.event.inputs.FILE }}.xml --depth=1
          repo sync -c -j8 --no-tags --no-clone-bundle --force-sync
          find kernel_platform -name '*abi_gki_protected_exports*' -delete || true
          sed -i '/protected_exports_list/d' kernel_platform/*/BUILD.bazel 2>/dev/null || true

      - name: Set Kernel Version Suffix
        run: |
          set -e
          echo "üè∑Ô∏è Setting kernel suffix..."
          cd kernel_workspace
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          if [ -z "$SUFFIX" ]; then
            SUFFIX="$(shuf -i 0-9 -n 1)-o-$(openssl rand -hex 4)"
          fi
          echo "Using suffix: $SUFFIX"
          for script in $(find kernel_platform -name setlocalversion); do
            sed -i 's/ -dirty//g; $i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$script"
            if grep -q 'KERNELVERSION.*scm_version' "$script"; then
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${{ env.ANDROID_VERSION }}-${SUFFIX}\"|" "$script"
            else
              sed -i "s|echo \"\\\$res\"|res=\"\$(echo \"\$res\" | cut -d- -f1-2)-${SUFFIX}\"\necho \"\$res\"|" "$script"
            fi
            chmod +x "$script"
          done
          git add -A
          git commit -m "Apply kernel suffix: $SUFFIX" || true

      - name: Integrate KernelSU
        run: |
          set -e
          echo "üîå Integrating KernelSU..."
          cd kernel_workspace/kernel_platform
          META="${{ github.event.inputs.KSU_META }}"
          BRANCH="${META%%/*}"
          TAG="${META#*/}"
          curl -sL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH"
          cd KernelSU
          KSU_API=$(curl -sL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH/kernel/Makefile" | \
            awk -F'= ' '/KSU_VERSION_API/ {print $2}' | tr -d '[:space:]' || echo "3.1.7")
          KSU_FULL="v$KSU_API-$TAG@$BRANCH"
          KSU_VER=$(($(git rev-list --count HEAD 2>/dev/null || echo 13000) + 10700))
          sed -i '/KSU_VERSION_API/d; /KSU_VERSION_FULL/d' kernel/Makefile
          echo "KSU_VERSION_API := $KSU_API" >> kernel/Makefile
          echo "KSU_VERSION_FULL := $KSU_FULL" >> kernel/Makefile
          echo "KSU_API=$KSU_API" >> $GITHUB_ENV
          echo "KSU_FULL=$KSU_FULL" >> $GITHUB_ENV
          echo "KSU_VER=$KSU_VER" >> $GITHUB_ENV

      - name: Apply Kernel Patches
        run: |
          set -e
          echo "üß© Applying kernel patches..."
          cd kernel_workspace
          git clone -q https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }} --depth=1
          git clone -q https://github.com/ShirkNeko/SukiSU_patch.git --depth=1
          cd kernel_platform/common
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch .
          cp -r ../../susfs4ksu/kernel_patches/fs/* fs/
          cp -r ../../susfs4ksu/kernel_patches/include/linux/* include/linux/
          if [[ "${{ env.KERNEL_VERSION }}" == "6.6" && ! $(grep -qr 'common-modules/trusty' "$GITHUB_WORKSPACE/kernel_workspace/.repo/manifests_fallback/${{ github.event.inputs.FILE }}.xml") ]]; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g; /#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || { echo "SUSFS patch failed"; exit 1; }
          cp ../../SukiSU_patch/69_hide_stuff.patch .
          patch -p1 -F 3 < 69_hide_stuff.patch || { echo "Hide stuff patch failed"; exit 1; }
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch .
            patch -p1 -F 3 < syscall_hooks.patch || { echo "VFS patch failed"; exit 1; }
          fi
          if [ "${{ env.KERNEL_VERSION }}" = "6.6" ]; then
            curl -sLO --retry 5 --retry-delay 2 --retry-connrefused https://github.com/Numbersf/Action-Build/raw/SukiSU-Ultra/patches/hmbird_patch.patch
            [ -f hmbird_patch.patch ] || { echo "Failed to download hmbird_patch"; exit 1; }
            sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
            patch -p1 -F 3 < hmbird_patch.patch || { echo "HMBIRD patch failed"; exit 1; }
          fi

      - name: Configure Kernel Build
        run: |
          set -e
          echo "‚öôÔ∏è Configuring kernel build..."
          cd kernel_workspace/kernel_platform/common
          CONFIG="arch/arm64/configs/gki_defconfig"
          cat <<EOF >> "$CONFIG"
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_IP_ECN=y
          CONFIG_TCP_ECN=y
          CONFIG_IPV6_ECN=y
          CONFIG_IP_NF_TARGET_ECN=y
          CONFIG_DEBUG_KERNEL=n
          CONFIG_DYNAMIC_DEBUG=n
          CONFIG_DEBUG_INFO=n
          CONFIG_MQ_IOSCHED_SSG=y
          CONFIG_MQ_IOSCHED_SSG_CGROUP=y
          CONFIG_LTO_CLANG=y
          CONFIG_LTO_CLANG_THIN=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_LLVM_POLLY=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y
          CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
          $( [ "${{ github.event.inputs.KPM }}" = "true" ] && echo "CONFIG_KPM=y" )
          $( [ "${{ github.event.inputs.VFS }}" = "true" ] && echo -e "CONFIG_KSU_SUSFS_SUS_SU=n\nCONFIG_KSU_MANUAL_HOOK=y" || echo -e "CONFIG_KSU_SUSFS_SUS_SU=y\nCONFIG_KPROBES=y" )
          EOF
          sed -i '/CONFIG_REGMAP_KUNIT=m/d; /CONFIG_INPUT_KUNIT_TEST=m/d; /CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=m/d' "$CONFIG"
          sed -i '/CONFIG_SND_SOC_UTILS_KUNIT_TEST=m/d; /CONFIG_HID_KUNIT_TEST=m/d; /CONFIG_RTC_LIB_KUNIT_TEST=m/d' "$CONFIG"
          sed -i '/CONFIG_CLK_KUNIT_TEST=m/d; /CONFIG_CLK_GATE_KUNIT_TEST=m/d; /CONFIG_IIO_FORMAT_KUNIT_TEST=m/d' "$CONFIG"
          sed -i '/CONFIG_EXT4_KUNIT_TESTS=m/d; /CONFIG_FAT_KUNIT_TEST=m/d; /CONFIG_LTO_NONE/d' "$CONFIG"
          sed -i '/CONFIG_LTO_CLANG_FULL/d; /CONFIG_LTO_CLANG/d' "$CONFIG"
          sed -i 's/check_defconfig//' ./build.config.gki

      - name: Set Build Timestamp
        if: ${{ github.event.inputs.BUILD_TIME != '' && !contains(github.event.inputs.BUILD_TIME, 'F') && !contains(github.event.inputs.BUILD_TIME, 'f') }}
        run: |
          set -e
          echo "üïí Setting custom build timestamp..."
          echo "KBUILD_BUILD_TIMESTAMP=${{ github.event.inputs.BUILD_TIME }}" >> $GITHUB_ENV
          cd kernel_workspace/kernel_platform
          for mkcompile in $(find . -name mkcompile_h); do
            perl -i -pe "s/UTS_VERSION=\".*?\"/UTS_VERSION=\"#1 SMP PREEMPT ${{ github.event.inputs.BUILD_TIME }}\"/" "$mkcompile"
          done

      - name: Build Kernel
        run: |
          set -e
          echo "üèóÔ∏è Building kernel (${{ github.event.inputs.FAST_BUILD == 'true' && 'Fast' || 'Standard' }} mode)..."
          cd kernel_workspace/kernel_platform
          export LTO=thin
          export KCFLAGS="-O2 -flto=thin"
          if [ "${{ github.event.inputs.FAST_BUILD }}" = "true" ]; then
            case "${{ env.KERNEL_VERSION }}" in
              "6.6"|"6.1")
                TOOLCHAIN="clang-r510928"
                CLANG_DIR="prebuilts"
                USE_LLVM_IAS=""
                ;;
              "5.15")
                TOOLCHAIN="clang-r450784e"
                CLANG_DIR="prebuilts"
                USE_LLVM_IAS=""
                ;;
              "5.10")
                TOOLCHAIN="clang-r416183b"
                CLANG_DIR="prebuilts-master"
                USE_LLVM_IAS="LLVM_IAS=1"
                ;;
              "5.4")
                TOOLCHAIN="clang-r377782d"
                CLANG_DIR="prebuilts"
                USE_LLVM_IAS="LLVM_IAS=1"
                ;;
              *)
                echo "‚ö†Ô∏è Unsupported kernel version: ${{ env.KERNEL_VERSION }}"
                ./oplus/build/oplus_build_kernel.sh ${{ env.CPUD }} ${{ env.BUILD_METHOD }}
                ccache -s
                exit 0
                ;;
            esac
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/$CLANG_DIR/clang/host/linux-x86/$TOOLCHAIN/bin:$PATH"
            export PATH="/usr/lib/ccache:$PATH"
            export CC="ccache clang"
            cd common
            sed -i "/config CFI_PERMISSIVE/i config LLVM_POLLY\n\tbool \"Enable LLVM's polyhedral loop optimizer (Polly)\"\n\thelp\n\t  Polly optimizes loops for maximum cache locality.\n" arch/Kconfig
            sed -i 's/ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE/ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3\nKBUILD_CFLAGS += -O3\nKBUILD_RUSTFLAGS += -Copt-level=3\nelse ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE/' Makefile
            echo -e "default CC_OPTIMIZE_FOR_PERFORMANCE_O3\nconfig CC_OPTIMIZE_FOR_PERFORMANCE_O3\n\tbool \"Optimize more for performance (-O3)\"\n\thelp\n\t  Pass \"-O3\" to optimize kernel for performance." > /tmp/kconfig_changes.txt
            sed -i '/default CC_OPTIMIZE_FOR_PERFORMANCE/d; /prompt "Compiler optimization level"/r /tmp/kconfig_changes.txt' init/Kconfig
            echo -e "# Enable Polly Optimizer\nifdef CONFIG_LLVM_POLLY\nKBUILD_CFLAGS += -fvectorize -funroll-loops -mllvm -polly -mllvm -polly-run-inliner -mllvm -polly-ast-use-context -mllvm -polly-detect-keep-going -mllvm -polly-invariant-load-hoisting -mllvm -polly-vectorizer=stripmine\nifeq (\$(shell test \$(CONFIG_CLANG_VERSION) -gt 130000; echo \$\$?),0)\nKBUILD_CFLAGS += -mllvm -polly-loopfusion-greedy=1 -mllvm -polly-reschedule=1 -mllvm -polly-postopts=1 -mllvm -polly-num-threads=0 -mllvm -polly-omp-backend=LLVM -mllvm -polly-scheduling=dynamic -mllvm -polly-scheduling-chunksize=1\nelse\nKBUILD_CFLAGS += -mllvm -polly-opt-fusion=max\nendif\nifdef CONFIG_LD_DEAD_CODE_DATA_ELIMINATION\nPOLLY_FLAGS += -mllvm -polly-run-dce\nendif\nendif" >> Makefile
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+="-O2 -flto=thin" ${USE_LLVM_IAS} gki_defconfig all
          else
            [ -f oplus/build/oplus_build_kernel.sh ] || { echo "Build script not found"; exit 1; }
            ./oplus/build/oplus_build_kernel.sh ${{ env.CPUD }} ${{ env.BUILD_METHOD }}
          fi
          ccache -s

      - name: Prepare Artifacts
        run: |
          set -e
          echo "üì¶ Preparing artifacts..."
          cd kernel_workspace
          git clone -q https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          mkdir -p kernel_platform/out/FinalImageFind
          IMAGE_PATH=$(find kernel_platform -name Image -print -quit)
          if [ -z "$IMAGE_PATH" ]; then
            echo "‚ùå Kernel image not found"
            exit 1
          fi
          cp "$IMAGE_PATH" AnyKernel3/Image
          cp "$IMAGE_PATH" kernel_platform/out/FinalImageFind/Image
          if [ "${{ env.CPU }}" = "sm8750" ] && [ "${{ github.event.inputs.FAST_BUILD }}" = "false" ]; then
            for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
              if [ -f "$(dirname "$IMAGE_PATH")/$file" ]; then
                target_name="${file/system_dlkm.erofs.img/system_dlkm.img}"
                cp "$(dirname "$IMAGE_PATH")/$file" "AnyKernel3/$target_name"
              fi
            done
          fi
          if [ "${{ github.event.inputs.KPM }}" = "true" ]; then
            echo "üîß Applying KPM patch..."
            cd kernel_platform/out/FinalImageFind
            curl -sLO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
            [ -f patch_linux ] || { echo "Failed to download patch_linux"; exit 1; }
            chmod +x patch_linux
            ./patch_linux
            mv oImage Image
            cp Image $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3/Image
          fi
          if [ "${{ github.event.inputs.SUSFS_CI }}" = "CI" ]; then
            echo "‚¨áÔ∏è Downloading SUSFS module from CI..."
            RUN_ID=$(curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
              jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
            if [ -n "$RUN_ID" ]; then
              ARTIFACT_URL=$(curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$RUN_ID/artifacts" | \
                jq -r '.artifacts[0].archive_download_url')
              [ -n "$ARTIFACT_URL" ] && curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o AnyKernel3/susfs_module.zip "$ARTIFACT_URL"
            fi
          elif [ "${{ github.event.inputs.SUSFS_CI }}" = "Release" ]; then
            echo "‚¨áÔ∏è Downloading SUSFS module from Release..."
            curl -sL -o AnyKernel3/susfs_module.zip \
              https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip
          fi
          echo "‚¨áÔ∏è Downloading SukiSU Manager..."
          ASSET_URL=$(curl -s https://api.github.com/repos/SukiSU-Ultra/SukiSU-Ultra/releases/latest | \
            jq -r '.assets[] | select(.name | endswith(".apk")) | .browser_download_url' | head -n1)
          if [ -n "$ASSET_URL" ]; then
            curl -sL -o AnyKernel3/manager.apk "$ASSET_URL"
          else
            echo "‚ö†Ô∏è No SukiSU Manager APK found in latest release"
          fi

      - name: Set Artifact Suffix
        id: suffix
        run: |
          SUFFIX=""
          [ "${{ github.event.inputs.VFS }}" = "true" ] && SUFFIX="${SUFFIX}_VFS"
          [ "${{ github.event.inputs.KPM }}" = "true" ] && SUFFIX="${SUFFIX}_KPM"
          echo "value=$SUFFIX" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SukiSU_${{ env.KSU_VER }}_${{ github.event.inputs.FILE }}${{ steps.suffix.outputs.value }}
          path: kernel_workspace/AnyKernel3/*
          compression-level: 0

      - name: Post-build Disk Check
        run: df -h
