name: test2
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: choice
        description: "Configuration File"
        required: true
        default: oneplus_13r
        options:
          - oneplus_nord_ce4_v
          - oneplus_nord_4_v
          - oneplus_ace_3v_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad_pro_v
          - oneplus_pad2_v
          - oneplus_ace5_pro
          - oneplus_13
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
      SUSFS_CI:
        type: choice
        description: "Download SUSFS Module Method"
        required: true
        default: CI
        options:
          - CI
          - Release
      KSU_META:
        type: string
        description: "Branch Name/Custom Version Identifier"
        required: false
        default: "susfs-main/ultra"
      BUILD_TIME:
        type: string
        description: "Custom Build Time (Enter F to Use Current Time)"
        required: false
        default: "Wed June 18 15:01:55 UTC 2025"
      SUFFIX:
        type: string
        description: "Custom Kernel Suffix (Leave Empty for Random String)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "Enable Fast Build?"
        required: true
        default: true
      VFS:
        type: boolean
        description: "Enable Manual Hooks (VFS)?"
        required: true
        default: true
      KPM:
        type: boolean
        description: "Enable Kernel Module (KPM)?"
        required: true
        default: true

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cpu: ${{ steps.validate.outputs.cpu }}
      cpud: ${{ steps.validate.outputs.cpud }}
      android_version: ${{ steps.validate.outputs.android_version }}
      kernel_version: ${{ steps.validate.outputs.kernel_version }}
      build_method: ${{ steps.validate.outputs.build_method }}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache_${{ github.event.inputs.FILE }}
      APT_CACHE_DIR: ${{ github.workspace }}/apt-cache
      CCACHE_MAXSIZE: 8G

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Device Configuration
        id: validate
        run: |
          set -e
          FILE="${{ github.event.inputs.FILE }}"
          declare -A VALID_COMBINATIONS=(
            ["oneplus_nord_ce4"]="sm7550 crow android14 5.15"
            ["oneplus_nord_4"]="sm7675 pineapple android14 6.1"
            ["oneplus_ace_3v"]="sm7675 pineapple android14 6.1"
            ["oneplus_10_pro"]="sm8450 waipio android12 5.10"
            ["oneplus_10t"]="sm8475 waipio android12 5.10"
            ["oneplus_11r"]="sm8475 waipio android12 5.10"
            ["oneplus_ace2"]="sm8475 waipio android12 5.10"
            ["oneplus_ace_pro"]="sm8475 waipio android12 5.10"
            ["oneplus_11"]="sm8550 kalama android13 5.15"
            ["oneplus_12r"]="sm8550 kalama android13 5.15"
            ["oneplus_ace2_pro"]="sm8550 kalama android13 5.15"
            ["oneplus_ace3"]="sm8550 kalama android13 5.15"
            ["oneplus_open"]="sm8550 kalama android13 5.15"
            ["oneplus12"]="sm8650 pineapple android14 6.1"
            ["oneplus_13r"]="sm8750 sun android15 6.6"
            ["oneplus_ace3_pro"]="sm8650 pineapple android14 6.1"
            ["oneplus_ace5"]="sm8650 pineapple android14 6.1"
            ["oneplus_pad_pro"]="sm8650 pineapple android14 6.1"
            ["oneplus_pad2"]="sm8650 pineapple android14 6.1"
            ["oneplus_ace5_pro"]="sm8750 sun android15 6.6"
            ["oneplus_13"]="sm8750 sun android15 6.6"
            ["oneplus_13t"]="sm8750 sun android15 6.6"
            ["oneplus_13s"]="sm8750 sun android15 6.6"
            ["oneplus_pad_2_pro"]="sm8750 sun android15 6.6"
            ["oneplus_pad_3"]="sm8750 sun android15 6.6"
          )
          FILE_BASE=$(echo "$FILE" | sed -E 's/_[a-z]+$//')
          COMBINATION="${VALID_COMBINATIONS[$FILE_BASE]}"
          if [ -z "$COMBINATION" ]; then
            echo "‚ùå Invalid device: $FILE"
            echo "Valid devices: ${!VALID_COMBINATIONS[@]}"
            exit 1
          fi
          read CPU CPUD ANDROID_VERSION KERNEL_VERSION <<< "$COMBINATION"
          BUILD_METHOD=$([[ "$ANDROID_VERSION" == "android15" && "$KERNEL_VERSION" == "6.6" ]] && echo "perf" || echo "gki")
          echo "cpu=$CPU" >> $GITHUB_OUTPUT
          echo "cpud=$CPUD" >> $GITHUB_OUTPUT
          echo "android_version=$ANDROID_VERSION" >> $GITHUB_OUTPUT
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "build_method=$BUILD_METHOD" >> $GITHUB_OUTPUT

      - name: Configure Environment
        run: |
          set -e
          mkdir -p "${{ env.CCACHE_DIR }}" "${{ env.APT_CACHE_DIR}}"/{archives,lists/partial}
          sudo tee /etc/apt/apt.conf.d/99github-actions-cache <<EOF
          Dir::Cache "${{ env.APT_CACHE_DIR }}";
          Dir::Cache::archives "${{ env.APT_CACHE_DIR }}/archives";
          Dir::State::lists "${{ env.APT_CACHE_DIR }}/lists";
          EOF
          sudo chown -R $USER:$USER "${{ env.APT_CACHE_DIR }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          ccache -M ${{ env.CCACHE_MAXSIZE }}
          touch "${{ env.CCACHE_DIR }}/.ccache_initialized"

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.APT_CACHE_DIR }}
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-deps-${{ github.event.inputs.FILE }}-v2-${{ hashFiles('.github/workflows/build.yml') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ github.event.inputs.FILE }}-v2-

      - name: Install Dependencies
        run: |
          set -e
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
            build-essential ccache git curl flex bison libssl-dev libelf-dev \
            libncurses-dev zlib1g-dev python3 python-is-python3 bc lz4 dwarves \
            llvm clang lld unzip cmake ninja-build pahole libxml2-utils rsync kmod cpio

          # Install LLVM and repo tool
          curl -sLO https://apt.llvm.org/llvm.sh && chmod +x llvm.sh
          sudo ./llvm.sh 20 all && rm llvm.sh
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod +x ~/repo && sudo mv ~/repo /usr/local/bin/

      - name: Initialize Kernel Workspace
        run: |
          set -e
          mkdir -p kernel_workspace/.repo/manifests_fallback
          curl -sLO "https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/oneplus/${{ steps.validate.outputs.cpu }}/${{ github.event.inputs.FILE }}.xml"
          mv "${{ github.event.inputs.FILE }}.xml" kernel_workspace/.repo/manifests_fallback/
          
          cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b oneplus/${{ steps.validate.outputs.cpu }} \
            -m ${{ github.event.inputs.FILE }}.xml \
            --depth=1
          repo sync -c -j$(nproc) --no-tags --no-clone-bundle --force-sync
          
          # Cleanup protected exports
          find kernel_platform -name '*abi_gki_protected_exports*' -delete -or -name 'BUILD.bazel' -exec sed -i '/protected_exports_list/d' {} +

      - name: Upload Workspace
        uses: actions/upload-artifact@v4
        with:
          name: kernel-workspace-${{ github.event.inputs.FILE }}
          path: kernel_workspace/
          retention-days: 1

  build:
    name: Build Kernel
    needs: setup
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache_${{ github.event.inputs.FILE }}
      APT_CACHE_DIR: ${{ github.workspace }}/apt-cache

    steps:
      - name: Download Workspace
        uses: actions/download-artifact@v4
        with:
          name: kernel-workspace-${{ github.event.inputs.FILE }}
          path: kernel_workspace/

      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ env.APT_CACHE_DIR }}
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-deps-${{ github.event.inputs.FILE }}-v2-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Set Kernel Version Suffix
        run: |
          set -e
          cd kernel_workspace
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          if [ -z "$SUFFIX" ]; then
            SUFFIX="$(shuf -i 0-9 -n 1)-o-$(openssl rand -hex 4)"
          fi
          
          for script in $(find kernel_platform -name setlocalversion); do
            sed -i -e 's/ -dirty//g' \
                   -e '/echo "\$res"/ {
                       a\    res=$(echo "$res" | cut -d- -f1-2)-'"$SUFFIX"'
                   }' "$script"
            chmod +x "$script"
          done
          git add -A && git commit -m "Apply kernel suffix: $SUFFIX" || true

      - name: Integrate KernelSU
        run: |
          set -e
          cd kernel_workspace/kernel_platform
          META="${{ github.event.inputs.KSU_META }}"
          BRANCH="${META%%/*}"
          TAG="${META#*/}"
          
          curl -sL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH"
          
          cd KernelSU
          KSU_API=$(curl -sL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH/kernel/Makefile" |
                    awk -F'= ' '/KSU_VERSION_API/ {gsub(/[[:space:]]/, "", $2); print $2}')
          [[ -z "$KSU_API" ]] && KSU_API="3.1.7"
          
          KSU_VER=$(($(git rev-list --count HEAD 2>/dev/null || echo 13000) + 10700))
          cat <<EOF >> kernel/Makefile
          KSU_VERSION_API := $KSU_API
          KSU_VERSION_FULL := v$KSU_API-$TAG@$BRANCH
          EOF
          echo "KSU_VER=$KSU_VER" >> $GITHUB_ENV

      - name: Apply Kernel Patches
        run: |
          set -e
          cd kernel_workspace
          git clone -q https://gitlab.com/simonpunk/susfs4ksu.git \
            -b gki-${{ needs.setup.outputs.android_version }}-${{ needs.setup.outputs.kernel_version }} \
            --depth=1
          git clone -q https://github.com/ShirkNeko/SukiSU_patch.git --depth=1
          
          cd kernel_platform/common
          cp ../../susfs4ksu/kernel_patches/*.patch .
          cp -r ../../susfs4ksu/kernel_patches/{fs,include} .
          
          # Apply patches
          for patch in 50_add_susfs_in_gki-*.patch 69_hide_stuff.patch; do
            patch -p1 < "$patch"
          done
          
          if ${{ github.event.inputs.VFS }}; then
            patch -p1 < syscall_hooks.patch
          fi
          
          if [[ "${{ needs.setup.outputs.kernel_version }}" == "6.6" ]]; then
            curl -sLO https://github.com/Numbersf/Action-Build/raw/SukiSU-Ultra/patches/hmbird_patch.patch
            sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
            patch -p1 < hmbird_patch.patch
          fi

      - name: Configure Kernel Build
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common
          CONFIG="arch/arm64/configs/gki_defconfig"
          
          # Base configurations
          cat <<EOF >> "$CONFIG"
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_IP_ECN=y
          CONFIG_TCP_ECN=y
          CONFIG_IPV6_ECN=y
          CONFIG_IP_NF_TARGET_ECN=y
          CONFIG_LTO_CLANG=y
          CONFIG_LTO_CLANG_THIN=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_LLVM_POLLY=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y
          CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
          EOF
          
          # Conditional configs
          ${{ github.event.inputs.KPM }} && echo "CONFIG_KPM=y" >> "$CONFIG"
          if ${{ github.event.inputs.VFS }}; then
            echo -e "CONFIG_KSU_SUSFS_SUS_SU=n\nCONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG"
          else
            echo -e "CONFIG_KSU_SUSFS_SUS_SU=y\nCONFIG_KPROBES=y" >> "$CONFIG"
          fi
          
          # Cleanup configs
          sed -i -e '/CONFIG_DEBUG_KERNEL/d' \
                 -e '/CONFIG_DYNAMIC_DEBUG/d' \
                 -e '/CONFIG_DEBUG_INFO/d' \
                 -e '/CONFIG_LTO_NONE/d' \
                 -e '/CONFIG_LTO_CLANG_FULL/d' \
                 -e '/CONFIG_LTO_CLANG/d' \
                 "$CONFIG"

      - name: Set Build Timestamp
        if: ${{ github.event.inputs.BUILD_TIME != '' && !contains(github.event.inputs.BUILD_TIME, 'F') }}
        run: |
          set -e
          cd kernel_workspace/kernel_platform
          find . -name mkcompile_h -exec perl -i -pe \
            "s/UTS_VERSION=\".*?\"/UTS_VERSION=\"#1 SMP PREEMPT ${{ github.event.inputs.BUILD_TIME }}\"/" {} +

      - name: Build Kernel
        run: |
          set -e
          cd kernel_workspace/kernel_platform
          export LTO=thin
          export KCFLAGS="-O2 -flto=thin"
          
          if ${{ github.event.inputs.FAST_BUILD }}; then
            # Fast build with ThinLTO
            export PATH="/usr/lib/ccache:$PATH"
            export CC="ccache clang"
            
            # Toolchain selection
            case "${{ needs.setup.outputs.kernel_version }}" in
              "6.6"|"6.1") TOOLCHAIN="clang-r510928" ;;
              "5.15")      TOOLCHAIN="clang-r450784e" ;;
              "5.10")      TOOLCHAIN="clang-r416183b" ;;
              "5.4")       TOOLCHAIN="clang-r377782d" ;;
              *)           echo "‚ö†Ô∏è Unsupported kernel version"; exit 1 ;;
            esac
            
            export PATH="$PWD/prebuilts/clang/host/linux-x86/$TOOLCHAIN/bin:$PATH"
            cd common
            make -j$(nproc) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
              O=out KCFLAGS+="-O2 -flto=thin" gki_defconfig all
          else
            # Standard build
            ./oplus/build/oplus_build_kernel.sh ${{ needs.setup.outputs.cpud }} ${{ needs.setup.outputs.build_method }}
          fi
          ccache -s

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.event.inputs.FILE }}
          path: |
            kernel_workspace/kernel_platform/common/out/
            kernel_workspace/kernel_platform/out/
          retention-days: 1

  package:
    name: Package Artifacts
    needs: [setup, build]
    runs-on: ubuntu-latest

    steps:
      - name: Download Kernel Artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-build-${{ github.event.inputs.FILE }}
          path: kernel_workspace/

      - name: Prepare Artifacts
        run: |
          set -e
          cd kernel_workspace
          git clone -q https://github.com/Numbersf/AnyKernel3
          rm -rf AnyKernel3/.git
          
          # Find and copy kernel image
          IMAGE_PATH=$(find . -name Image -print -quit)
          cp "$IMAGE_PATH" AnyKernel3/Image
          
          # Additional files for specific devices
          if [[ "${{ needs.setup.outputs.cpu }}" == "sm8750" && ! "${{ github.event.inputs.FAST_BUILD }}" ]]; then
            for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
              [ -f "$(dirname "$IMAGE_PATH")/$file" ] && \
                cp "$(dirname "$IMAGE_PATH")/$file" "AnyKernel3/${file/system_dlkm.erofs.img/system_dlkm.img}"
            done
          fi
          
          # Apply KPM patch if enabled
          if ${{ github.event.inputs.KPM }}; then
            cd AnyKernel3
            curl -sLO https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
            chmod +x patch_linux
            ./patch_linux
            mv oImage Image
            cd ..
          fi
          
          # Download SUSFS module
          if [[ "${{ github.event.inputs.SUSFS_CI }}" == "CI" ]]; then
            ARTIFACT_URL=$(curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/artifacts" | \
              jq -r '.artifacts[0].archive_download_url')
            curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -o AnyKernel3/susfs_module.zip "$ARTIFACT_URL"
          else
            curl -sL -o AnyKernel3/susfs_module.zip \
              https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip
          fi
          
          # Download SukiSU Manager
          curl -sL -o AnyKernel3/manager.apk \
            $(curl -s https://api.github.com/repos/SukiSU-Ultra/SukiSU-Ultra/releases/latest | 
              jq -r '.assets[] | select(.name | endswith(".apk")) | .browser_download_url' | head -1)

      - name: Upload Final Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SukiSU_${{ env.KSU_VER }}_${{ github.event.inputs.FILE }}_${{ github.event.inputs.VFS && 'VFS' || '' }}${{ github.event.inputs.KPM && 'KPM' || '' }}
          path: kernel_workspace/AnyKernel3/*
          retention-days: 7

      - name: Post-build Cleanup
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
